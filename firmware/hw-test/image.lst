
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000758  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  00000758  00000758  000007ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000009ec  0000075c  0000075c  000007b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00001148  00001148  0000119c  2**2
                  ALLOC
  4 .debug_abbrev 000003e0  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000868  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006fc  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  000024e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000227  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001b2  00000000  00000000  00002877  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000008f  00000000  00000000  00002a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000243  00000000  00000000  00002af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002d3b  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 000000b8  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 ef 	calli 488 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 0f ff 	mvhi sp,0xfff
 104:	3b 9c ff fc 	ori sp,sp,0xfffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 11 50 	ori gp,gp,0x1150
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 11 48 	ori r1,r1,0x1148
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 11 d4 	ori r3,r3,0x11d4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
44,
34,
24,
16};
int main()
{
 208:	37 9c ff d8 	addi sp,sp,-40
 20c:	5b 8b 00 28 	sw (sp+40),r11
 210:	5b 8c 00 24 	sw (sp+36),r12
 214:	5b 8d 00 20 	sw (sp+32),r13
 218:	5b 8e 00 1c 	sw (sp+28),r14
 21c:	5b 8f 00 18 	sw (sp+24),r15
 220:	5b 90 00 14 	sw (sp+20),r16
 224:	5b 91 00 10 	sw (sp+16),r17
 228:	5b 92 00 0c 	sw (sp+12),r18
 22c:	5b 93 00 08 	sw (sp+8),r19
 230:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t  c;
	gpio0->oe = 0xFF;
 234:	78 0b 00 00 	mvhi r11,0x0
 238:	39 6b 0f 34 	ori r11,r11,0xf34
 23c:	29 62 00 00 	lw r2,(r11+0)
 240:	34 01 00 ff 	mvi r1,255
 244:	78 11 00 00 	mvhi r17,0x0
 248:	58 41 00 18 	sw (r2+24),r1
nsleep(20000);
}*/

	for(;;) {	

			c = gpio0->in;
 24c:	28 41 00 10 	lw r1,(r2+16)
			
	switch (c) {
 250:	34 10 00 02 	mvi r16,2
 254:	3a 31 07 5c 	ori r17,r17,0x75c
 258:	20 21 00 ff 	andi r1,r1,0xff
					  result = sen [N];
				  for(unos=0; unos<result; unos++){
						gpio0->out = 0x01;
						nsleep (1000);
					}
				for(ceros=result; ceros<300; ceros++){
 25c:	34 0f 01 2b 	mvi r15,299
    			break;
		case 0x02:
			for (N=0; N<1; N++){	
					  result = sen [N];
				  for(unos=0; unos<result; unos++){
						gpio0->out = 0x01;
 260:	34 0e 00 01 	mvi r14,1

	for(;;) {	

			c = gpio0->in;
			
	switch (c) {
 264:	34 12 00 04 	mvi r18,4
 268:	34 13 00 08 	mvi r19,8
 26c:	44 30 00 08 	be r1,r16,28c <main+0x84>
 270:	54 30 00 24 	bgu r1,r16,300 <main+0xf8>
 274:	44 2e 00 10 	be r1,r14,2b4 <main+0xac>
			nsleep(20000);
			gpio0->out = 0x00;
			nsleep(20000);
    			break;
    		
		default: gpio0->out = 0x00;
 278:	58 40 00 14 	sw (r2+20),r0
			}
		
		gpio0->out=0x00;		
 27c:	58 40 00 14 	sw (r2+20),r0
nsleep(20000);
}*/

	for(;;) {	

			c = gpio0->in;
 280:	28 41 00 10 	lw r1,(r2+16)
			
	switch (c) {
 284:	20 21 00 ff 	andi r1,r1,0xff
 288:	5c 30 ff fa 	bne r1,r16,270 <main+0x68>
	}

    			break;
		case 0x02:
			for (N=0; N<1; N++){	
					  result = sen [N];
 28c:	2a 2c 00 00 	lw r12,(r17+0)
				  for(unos=0; unos<result; unos++){
 290:	4c 0c 00 36 	bge r0,r12,368 <main+0x160>
 294:	34 0d 00 00 	mvi r13,0
 298:	35 ad 00 01 	addi r13,r13,1
						gpio0->out = 0x01;
 29c:	58 4e 00 14 	sw (r2+20),r14
						nsleep (1000);
 2a0:	34 01 03 e8 	mvi r1,1000
 2a4:	f8 00 00 b8 	calli 584 <nsleep>

    			break;
		case 0x02:
			for (N=0; N<1; N++){	
					  result = sen [N];
				  for(unos=0; unos<result; unos++){
 2a8:	4d ac 00 2e 	bge r13,r12,360 <main+0x158>
 2ac:	29 62 00 00 	lw r2,(r11+0)
 2b0:	e3 ff ff fa 	bi 298 <main+0x90>
			
	switch (c) {
    		case 0x01:
			
			for (N=0; N<1; N++){	
					  result = sen [N];
 2b4:	2a 2c 00 00 	lw r12,(r17+0)
				  for(unos=0; unos<result; unos++){
 2b8:	4c 0c 00 0b 	bge r0,r12,2e4 <main+0xdc>
 2bc:	34 0d 00 00 	mvi r13,0
 2c0:	35 ad 00 01 	addi r13,r13,1
						gpio0->out = 0x01;
 2c4:	58 4e 00 14 	sw (r2+20),r14
						nsleep (100);
 2c8:	34 01 00 64 	mvi r1,100
 2cc:	f8 00 00 ae 	calli 584 <nsleep>
	switch (c) {
    		case 0x01:
			
			for (N=0; N<1; N++){	
					  result = sen [N];
				  for(unos=0; unos<result; unos++){
 2d0:	4d ac 00 03 	bge r13,r12,2dc <main+0xd4>
 2d4:	29 62 00 00 	lw r2,(r11+0)
 2d8:	e3 ff ff fa 	bi 2c0 <main+0xb8>
 2dc:	29 62 00 00 	lw r2,(r11+0)
						gpio0->out = 0x01;
						nsleep (100);
					}
				for(ceros=result; ceros<300; ceros++){
 2e0:	49 8f ff e7 	bg r12,r15,27c <main+0x74>
 2e4:	35 8c 00 01 	addi r12,r12,1
					gpio0->out = 0x00;
 2e8:	58 40 00 14 	sw (r2+20),r0
					nsleep (100);
 2ec:	34 01 00 64 	mvi r1,100
 2f0:	f8 00 00 a5 	calli 584 <nsleep>
					  result = sen [N];
				  for(unos=0; unos<result; unos++){
						gpio0->out = 0x01;
						nsleep (100);
					}
				for(ceros=result; ceros<300; ceros++){
 2f4:	49 8f 00 0d 	bg r12,r15,328 <main+0x120>
 2f8:	29 62 00 00 	lw r2,(r11+0)
 2fc:	e3 ff ff fa 	bi 2e4 <main+0xdc>

	for(;;) {	

			c = gpio0->in;
			
	switch (c) {
 300:	44 32 00 0d 	be r1,r18,334 <main+0x12c>
 304:	5c 33 ff dd 	bne r1,r19,278 <main+0x70>
			gpio0->out = 0x00;
			msleep(2);
    			break;
		
		case 0x08:
			gpio0->in;
 308:	28 41 00 10 	lw r1,(r2+16)
			gpio0->out = 0x01;
 30c:	58 4e 00 14 	sw (r2+20),r14
			nsleep(20000);
 310:	34 01 4e 20 	mvi r1,20000
 314:	f8 00 00 9c 	calli 584 <nsleep>
			gpio0->out = 0x00;
 318:	29 62 00 00 	lw r2,(r11+0)
			nsleep(20000);
 31c:	34 01 4e 20 	mvi r1,20000
		
		case 0x08:
			gpio0->in;
			gpio0->out = 0x01;
			nsleep(20000);
			gpio0->out = 0x00;
 320:	58 40 00 14 	sw (r2+20),r0
			nsleep(20000);
 324:	f8 00 00 98 	calli 584 <nsleep>
 328:	29 62 00 00 	lw r2,(r11+0)
    			break;
    		
		default: gpio0->out = 0x00;
			}
		
		gpio0->out=0x00;		
 32c:	58 40 00 14 	sw (r2+20),r0
 330:	e3 ff ff d4 	bi 280 <main+0x78>
					}
		  
	}
    			break;
		case 0x04:
			gpio0->in;
 334:	28 41 00 10 	lw r1,(r2+16)
			gpio0->out = 0x01;
 338:	58 4e 00 14 	sw (r2+20),r14
			msleep(2);
 33c:	34 01 00 02 	mvi r1,2
 340:	f8 00 00 82 	calli 548 <msleep>
			gpio0->out = 0x00;
 344:	29 62 00 00 	lw r2,(r11+0)
			msleep(2);
 348:	34 01 00 02 	mvi r1,2
    			break;
		case 0x04:
			gpio0->in;
			gpio0->out = 0x01;
			msleep(2);
			gpio0->out = 0x00;
 34c:	58 40 00 14 	sw (r2+20),r0
			msleep(2);
 350:	f8 00 00 7e 	calli 548 <msleep>
 354:	29 62 00 00 	lw r2,(r11+0)
    			break;
    		
		default: gpio0->out = 0x00;
			}
		
		gpio0->out=0x00;		
 358:	58 40 00 14 	sw (r2+20),r0
 35c:	e3 ff ff c9 	bi 280 <main+0x78>

    			break;
		case 0x02:
			for (N=0; N<1; N++){	
					  result = sen [N];
				  for(unos=0; unos<result; unos++){
 360:	29 62 00 00 	lw r2,(r11+0)
						gpio0->out = 0x01;
						nsleep (1000);
					}
				for(ceros=result; ceros<300; ceros++){
 364:	49 8f ff c6 	bg r12,r15,27c <main+0x74>
 368:	35 8c 00 01 	addi r12,r12,1
					gpio0->out = 0x00;
 36c:	58 40 00 14 	sw (r2+20),r0
					nsleep (1000);
 370:	34 01 03 e8 	mvi r1,1000
 374:	f8 00 00 84 	calli 584 <nsleep>
					  result = sen [N];
				  for(unos=0; unos<result; unos++){
						gpio0->out = 0x01;
						nsleep (1000);
					}
				for(ceros=result; ceros<300; ceros++){
 378:	49 8f ff ec 	bg r12,r15,328 <main+0x120>
 37c:	29 62 00 00 	lw r2,(r11+0)
 380:	e3 ff ff fa 	bi 368 <main+0x160>

00000384 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 384:	c3 a0 00 00 	ret

00000388 <tic_isr_0>:
{
	uint32_t out_state = 0;
	
	//uart_putstr("Interruption Timer 0\n");
	
	out_state = gpio0->out;
 388:	78 03 00 00 	mvhi r3,0x0
 38c:	38 63 0f 34 	ori r3,r3,0xf34
	gpio0->out = out_state | 0x01;
	
	timer0->counter0 = 0;
	timer0->tcr0   = TIMER_EN | TIMER_AR | TIMER_IRQEN;
	
	timer0->compare1 = conf_util(pwm_d[0]);
 390:	78 02 00 00 	mvhi r2,0x0
uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
		}

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 394:	78 01 00 00 	mvhi r1,0x0
{
	uint32_t out_state = 0;
	
	//uart_putstr("Interruption Timer 0\n");
	
	out_state = gpio0->out;
 398:	28 63 00 00 	lw r3,(r3+0)
	gpio0->out = out_state | 0x01;
	
	timer0->counter0 = 0;
	timer0->tcr0   = TIMER_EN | TIMER_AR | TIMER_IRQEN;
	
	timer0->compare1 = conf_util(pwm_d[0]);
 39c:	38 42 0f 3c 	ori r2,r2,0xf3c
uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
		}

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 3a0:	38 21 11 48 	ori r1,r1,0x1148
 3a4:	28 45 00 00 	lw r5,(r2+0)
 3a8:	28 22 00 00 	lw r2,(r1+0)
{
	uint32_t out_state = 0;
	
	//uart_putstr("Interruption Timer 0\n");
	
	out_state = gpio0->out;
 3ac:	28 64 00 14 	lw r4,(r3+20)
	gpio0->out = out_state | 0x01;
	
	timer0->counter0 = 0;
 3b0:	78 01 00 00 	mvhi r1,0x0
uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
		}

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 3b4:	88 a2 10 00 	mul r2,r5,r2
	//uart_putstr("Interruption Timer 0\n");
	
	out_state = gpio0->out;
	gpio0->out = out_state | 0x01;
	
	timer0->counter0 = 0;
 3b8:	38 21 0f 30 	ori r1,r1,0xf30
 3bc:	28 21 00 00 	lw r1,(r1+0)
	uint32_t out_state = 0;
	
	//uart_putstr("Interruption Timer 0\n");
	
	out_state = gpio0->out;
	gpio0->out = out_state | 0x01;
 3c0:	38 84 00 01 	ori r4,r4,0x1
 3c4:	58 64 00 14 	sw (r3+20),r4
uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
		}

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 3c8:	08 43 00 16 	muli r3,r2,22
	//uart_putstr("Interruption Timer 0\n");
	
	out_state = gpio0->out;
	gpio0->out = out_state | 0x01;
	
	timer0->counter0 = 0;
 3cc:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0   = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3d0:	34 02 00 0e 	mvi r2,14
 3d4:	58 22 00 00 	sw (r1+0),r2
	
	timer0->compare1 = conf_util(pwm_d[0]);
 3d8:	58 23 00 10 	sw (r1+16),r3
	timer0->counter1 = 0;
 3dc:	58 20 00 14 	sw (r1+20),r0
	timer0->tcr1   = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3e0:	58 22 00 0c 	sw (r1+12),r2
}
 3e4:	c3 a0 00 00 	ret

000003e8 <tic_isr_1>:
{
	uint32_t out_state = 0;
	
	//uart_putstr("Interruption Timer 1\n");
	
	out_state = gpio0->out;
 3e8:	78 01 00 00 	mvhi r1,0x0
 3ec:	38 21 0f 34 	ori r1,r1,0xf34
 3f0:	28 22 00 00 	lw r2,(r1+0)
	gpio0->out = out_state & 0xFE;
	
	timer0->tcr1     = 0x00;
 3f4:	78 01 00 00 	mvhi r1,0x0
 3f8:	38 21 0f 30 	ori r1,r1,0xf30
{
	uint32_t out_state = 0;
	
	//uart_putstr("Interruption Timer 1\n");
	
	out_state = gpio0->out;
 3fc:	28 43 00 14 	lw r3,(r2+20)
	gpio0->out = out_state & 0xFE;
	
	timer0->tcr1     = 0x00;
 400:	28 21 00 00 	lw r1,(r1+0)
	uint32_t out_state = 0;
	
	//uart_putstr("Interruption Timer 1\n");
	
	out_state = gpio0->out;
	gpio0->out = out_state & 0xFE;
 404:	20 63 00 fe 	andi r3,r3,0xfe
 408:	58 43 00 14 	sw (r2+20),r3
	
	timer0->tcr1     = 0x00;
 40c:	58 20 00 0c 	sw (r1+12),r0
}
 410:	c3 a0 00 00 	ret

00000414 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 414:	78 02 00 00 	mvhi r2,0x0
 418:	38 42 0f 2c 	ori r2,r2,0xf2c
	   timer0->tcr0 = 0xAA;
 41c:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 420:	28 44 00 00 	lw r4,(r2+0)
	   timer0->tcr0 = 0xAA;
 424:	38 21 0f 30 	ori r1,r1,0xf30
	   gpio0->ctrl=0x55;
 428:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 42c:	28 23 00 00 	lw r3,(r1+0)
	   gpio0->ctrl=0x55;
 430:	38 42 0f 34 	ori r2,r2,0xf34
	   spi0->rxtx=1;
 434:	78 01 00 00 	mvhi r1,0x0

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 438:	28 42 00 00 	lw r2,(r2+0)
	   spi0->rxtx=1;
 43c:	38 21 0f 38 	ori r1,r1,0xf38

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 440:	34 05 00 1e 	mvi r5,30
 444:	58 85 00 04 	sw (r4+4),r5
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
	   spi0->rxtx=1;
 448:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 44c:	34 04 00 aa 	mvi r4,170
 450:	58 64 00 00 	sw (r3+0),r4
	   gpio0->ctrl=0x55;
 454:	34 03 00 55 	mvi r3,85
 458:	58 43 00 00 	sw (r2+0),r3
	   spi0->rxtx=1;
 45c:	34 02 00 01 	mvi r2,1
 460:	58 22 00 00 	sw (r1+0),r2
	   spi0->nop1=2;
 464:	34 02 00 02 	mvi r2,2
 468:	58 22 00 04 	sw (r1+4),r2
	   spi0->cs=3;
 46c:	34 02 00 03 	mvi r2,3
 470:	58 22 00 08 	sw (r1+8),r2
	   spi0->divisor=4;
 474:	34 02 00 04 	mvi r2,4
 478:	58 22 00 10 	sw (r1+16),r2
	   spi0->nop2=5;
 47c:	34 02 00 05 	mvi r2,5
 480:	58 22 00 0c 	sw (r1+12),r2

}
 484:	c3 a0 00 00 	ret

00000488 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 488:	37 9c ff f0 	addi sp,sp,-16
 48c:	5b 8b 00 10 	sw (sp+16),r11
 490:	5b 8c 00 0c 	sw (sp+12),r12
 494:	5b 8d 00 08 	sw (sp+8),r13
 498:	5b 9d 00 04 	sw (sp+4),ra
 49c:	78 0b 00 00 	mvhi r11,0x0
 4a0:	39 6b 11 50 	ori r11,r11,0x1150
 4a4:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 4a8:	35 6d 00 80 	addi r13,r11,128
 4ac:	e0 00 00 04 	bi 4bc <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 4b0:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 4b4:	45 6d 00 08 	be r11,r13,4d4 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 4b8:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 4bc:	21 81 00 01 	andi r1,r12,0x1
 4c0:	44 20 ff fc 	be r1,r0,4b0 <irq_handler+0x28>
 4c4:	29 61 00 00 	lw r1,(r11+0)
 4c8:	35 6b 00 04 	addi r11,r11,4
 4cc:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 4d0:	5d 6d ff fa 	bne r11,r13,4b8 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 4d4:	2b 9d 00 04 	lw ra,(sp+4)
 4d8:	2b 8b 00 10 	lw r11,(sp+16)
 4dc:	2b 8c 00 0c 	lw r12,(sp+12)
 4e0:	2b 8d 00 08 	lw r13,(sp+8)
 4e4:	37 9c 00 10 	addi sp,sp,16
 4e8:	c3 a0 00 00 	ret

000004ec <isr_init>:

void isr_init()
{
 4ec:	78 01 00 00 	mvhi r1,0x0
 4f0:	78 02 00 00 	mvhi r2,0x0
 4f4:	38 21 11 50 	ori r1,r1,0x1150
 4f8:	38 42 03 84 	ori r2,r2,0x384
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 4fc:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 500:	58 22 00 00 	sw (r1+0),r2
 504:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 508:	5c 23 ff fe 	bne r1,r3,500 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 50c:	c3 a0 00 00 	ret

00000510 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 510:	78 03 00 00 	mvhi r3,0x0
 514:	3c 21 00 02 	sli r1,r1,2
 518:	38 63 11 50 	ori r3,r3,0x1150
 51c:	b4 61 18 00 	add r3,r3,r1
 520:	58 62 00 00 	sw (r3+0),r2
}
 524:	c3 a0 00 00 	ret

00000528 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 528:	78 03 00 00 	mvhi r3,0x0
 52c:	3c 21 00 02 	sli r1,r1,2
 530:	38 63 11 50 	ori r3,r3,0x1150
 534:	78 02 00 00 	mvhi r2,0x0
 538:	b4 61 18 00 	add r3,r3,r1
 53c:	38 42 03 84 	ori r2,r2,0x384
 540:	58 62 00 00 	sw (r3+0),r2
}
 544:	c3 a0 00 00 	ret

00000548 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 548:	78 04 00 00 	mvhi r4,0x0
 54c:	38 84 07 58 	ori r4,r4,0x758
 550:	28 83 00 00 	lw r3,(r4+0)
 554:	78 02 00 00 	mvhi r2,0x0
 558:	38 42 0f 30 	ori r2,r2,0xf30
 55c:	28 42 00 00 	lw r2,(r2+0)
 560:	88 23 08 00 	mul r1,r1,r3
 564:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 568:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 56c:	34 01 00 08 	mvi r1,8
 570:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 574:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 578:	20 21 00 01 	andi r1,r1,0x1
 57c:	44 20 ff fe 	be r1,r0,574 <msleep+0x2c>
}
 580:	c3 a0 00 00 	ret

00000584 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 584:	78 02 00 00 	mvhi r2,0x0
 588:	38 42 0f 30 	ori r2,r2,0xf30
 58c:	28 42 00 00 	lw r2,(r2+0)
 590:	08 21 00 64 	muli r1,r1,100
 594:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 598:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 59c:	34 01 00 08 	mvi r1,8
 5a0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 5a4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 5a8:	20 21 00 01 	andi r1,r1,0x1
 5ac:	44 20 ff fe 	be r1,r0,5a4 <nsleep+0x20>
}
 5b0:	c3 a0 00 00 	ret

000005b4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 5b4:	78 01 00 00 	mvhi r1,0x0
 5b8:	38 21 11 d0 	ori r1,r1,0x11d0
 5bc:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 0f 30 	ori r2,r2,0xf30
 5c8:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 5cc:	34 63 00 01 	addi r3,r3,1
 5d0:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5d4:	34 01 00 0e 	mvi r1,14
 5d8:	58 41 00 00 	sw (r2+0),r1
}
 5dc:	c3 a0 00 00 	ret

000005e0 <tic_init>:
	timer0->compare0 = conf_per();
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	// Setup timer0.1
	timer0->compare1 = conf_util(pwm_d[0]);
 5e0:	78 02 00 00 	mvhi r2,0x0
 5e4:	38 42 0f 3c 	ori r2,r2,0xf3c
uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
		}

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 5e8:	28 45 00 00 	lw r5,(r2+0)
	
}


uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
 5ec:	78 01 00 00 	mvhi r1,0x0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	gpio0->out=0x0F;
 5f0:	78 02 00 00 	mvhi r2,0x0
	
}


uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
 5f4:	78 06 00 00 	mvhi r6,0x0
 5f8:	38 21 11 48 	ori r1,r1,0x1148
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	gpio0->out=0x0F;
 5fc:	38 42 0f 34 	ori r2,r2,0xf34
	
}


uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
 600:	38 c6 07 58 	ori r6,r6,0x758
 604:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	gpio0->out=0x0F;
 608:	28 44 00 00 	lw r4,(r2+0)
	
}


uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
 60c:	28 c2 00 00 	lw r2,(r6+0)
void tic_init()
{
	gpio0->out=0x0F;

	// Setup timer0.0
	timer0->compare0 = conf_per();
 610:	78 01 00 00 	mvhi r1,0x0
 614:	38 21 0f 30 	ori r1,r1,0xf30
 618:	28 21 00 00 	lw r1,(r1+0)
	
}


uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
 61c:	88 62 10 00 	mul r2,r3,r2
		}

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 620:	88 65 18 00 	mul r3,r3,r5
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	gpio0->out=0x0F;
 624:	34 05 00 0f 	mvi r5,15
 628:	58 85 00 14 	sw (r4+20),r5

	// Setup timer0.0
	timer0->compare0 = conf_per();
 62c:	58 22 00 04 	sw (r1+4),r2
uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
		}

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 630:	08 63 00 16 	muli r3,r3,22
{
	gpio0->out=0x0F;

	// Setup timer0.0
	timer0->compare0 = conf_per();
	timer0->counter0 = 0;
 634:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 638:	34 05 00 0e 	mvi r5,14
 63c:	58 25 00 00 	sw (r1+0),r5

	// Setup timer0.1
	timer0->compare1 = conf_util(pwm_d[0]);
 640:	58 23 00 10 	sw (r1+16),r3
	timer0->counter1 = 0;
 644:	58 20 00 14 	sw (r1+20),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 648:	78 02 00 00 	mvhi r2,0x0
 64c:	78 04 00 00 	mvhi r4,0x0
 650:	78 03 00 00 	mvhi r3,0x0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	// Setup timer0.1
	timer0->compare1 = conf_util(pwm_d[0]);
	timer0->counter1 = 0;
	timer0->tcr1     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 654:	58 25 00 0c 	sw (r1+12),r5
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 658:	38 42 11 50 	ori r2,r2,0x1150
 65c:	38 84 03 88 	ori r4,r4,0x388
 660:	38 63 03 e8 	ori r3,r3,0x3e8
 664:	58 44 00 0c 	sw (r2+12),r4
 668:	58 43 00 3c 	sw (r2+60),r3

	isr_register(3, &tic_isr_0);
	//boton	
	isr_register(15, &tic_isr_1);
	
}
 66c:	c3 a0 00 00 	ret

00000670 <conf_per>:


uint32_t conf_per() {
			return (FCPU/1000)*pwm_p;
 670:	78 01 00 00 	mvhi r1,0x0
 674:	78 03 00 00 	mvhi r3,0x0
 678:	38 21 11 48 	ori r1,r1,0x1148
 67c:	38 63 07 58 	ori r3,r3,0x758
 680:	28 22 00 00 	lw r2,(r1+0)
 684:	28 61 00 00 	lw r1,(r3+0)
		}
 688:	88 41 08 00 	mul r1,r2,r1
 68c:	c3 a0 00 00 	ret

00000690 <conf_util>:

uint32_t conf_util(uint32_t percentage){
			return (FCPU/44100/100)*pwm_p*percentage;  
 690:	78 02 00 00 	mvhi r2,0x0
 694:	38 42 11 48 	ori r2,r2,0x1148
 698:	28 42 00 00 	lw r2,(r2+0)
 69c:	08 42 00 16 	muli r2,r2,22
		}
 6a0:	88 41 08 00 	mul r1,r2,r1
 6a4:	c3 a0 00 00 	ret

000006a8 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 6a8:	c3 a0 00 00 	ret

000006ac <uart_getchar>:

char uart_getchar()
{   
 6ac:	78 01 00 00 	mvhi r1,0x0
 6b0:	38 21 0f 2c 	ori r1,r1,0xf2c
 6b4:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 6b8:	28 41 00 00 	lw r1,(r2+0)
 6bc:	20 21 00 01 	andi r1,r1,0x1
 6c0:	44 20 ff fe 	be r1,r0,6b8 <uart_getchar+0xc>
	return uart0->rxtx;
 6c4:	28 41 00 04 	lw r1,(r2+4)
}
 6c8:	20 21 00 ff 	andi r1,r1,0xff
 6cc:	c3 a0 00 00 	ret

000006d0 <uart_putchar>:

void uart_putchar(char c)
{
 6d0:	78 02 00 00 	mvhi r2,0x0
 6d4:	38 42 0f 2c 	ori r2,r2,0xf2c
 6d8:	28 43 00 00 	lw r3,(r2+0)
 6dc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 6e0:	28 62 00 00 	lw r2,(r3+0)
 6e4:	20 42 00 10 	andi r2,r2,0x10
 6e8:	5c 40 ff fe 	bne r2,r0,6e0 <uart_putchar+0x10>
	uart0->rxtx = c;
 6ec:	58 61 00 04 	sw (r3+4),r1
}
 6f0:	c3 a0 00 00 	ret

000006f4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6f4:	40 24 00 00 	lbu r4,(r1+0)
 6f8:	44 80 00 0b 	be r4,r0,724 <uart_putstr+0x30>
 6fc:	78 02 00 00 	mvhi r2,0x0
 700:	38 42 0f 2c 	ori r2,r2,0xf2c
 704:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 708:	28 62 00 00 	lw r2,(r3+0)
 70c:	20 42 00 10 	andi r2,r2,0x10
 710:	5c 40 ff fe 	bne r2,r0,708 <uart_putstr+0x14>
	uart0->rxtx = c;
 714:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 718:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 71c:	40 24 00 00 	lbu r4,(r1+0)
 720:	5c 82 ff fa 	bne r4,r2,708 <uart_putstr+0x14>
 724:	c3 a0 00 00 	ret

00000728 <gpio_test>:
/*************************************************************************
GPIO 
*/
void gpio_test()
{
 gpio0->out=0xA;
 728:	78 01 00 00 	mvhi r1,0x0
 72c:	38 21 0f 34 	ori r1,r1,0xf34
 730:	28 21 00 00 	lw r1,(r1+0)
 734:	34 02 00 0a 	mvi r2,10
 738:	58 22 00 14 	sw (r1+20),r2
}
 73c:	c3 a0 00 00 	ret

00000740 <gpio_output>:

void gpio_output(char ampPWM)
{
 gpio0->out=ampPWM;
 740:	78 02 00 00 	mvhi r2,0x0
 744:	38 42 0f 34 	ori r2,r2,0xf34
 748:	28 42 00 00 	lw r2,(r2+0)
{
 gpio0->out=0xA;
}

void gpio_output(char ampPWM)
{
 74c:	20 21 00 ff 	andi r1,r1,0xff
 gpio0->out=ampPWM;
 750:	58 41 00 14 	sw (r2+20),r1
}
 754:	c3 a0 00 00 	ret
